@page "/"

@using WasmApp.Shared
@using WasmApp.Services
@using Telerik.DataSource.Extensions
@inject WeatherForecastService ForecastService

<TelerikGrid Height="550px" FilterMode="@GridFilterMode.FilterMenu"
             Sortable="true" Pageable="true" Groupable="true" PageSize="20"
             TItem="@WeatherForecastModel" OnRead="@ReadItems">
    <GridColumns>
        <GridColumn Field="Id" FieldType="@(typeof(int))" Title="Id" Width="100px" Groupable="false" />
        <GridColumn Field="Date" FieldType="@(typeof(DateTime))">
            <Template>
                @((context as WeatherForecastModel).Date.ToString("dddd, dd MMM yyyy"))
            </Template>
        </GridColumn>
        <GridColumn Field="TemperatureC" FieldType="@(typeof(int))" Title="Temp. C" >
            <GroupHeaderTemplate>
                @context.Value
                &nbsp;<span>Total Temp: @context.Sum</span>
            </GroupHeaderTemplate>
            </GridColumn>
        <GridColumn Field="TemperatureF" FieldType="@(typeof(int))" Title="Temp. F" />
        <GridColumn Field="Summary" FieldType="@(typeof(string))" />
    </GridColumns>
    <GridAggregates>
        <GridAggregate Field="TemperatureC" FieldType="@typeof(int)" Aggregate="@GridAggregateType.Sum" />
    </GridAggregates>
</TelerikGrid>

@code {
    async Task ReadItems(GridReadEventArgs args)
    {
        // we pass the request to the service, and there Telerik DataSource Extension methods will shape the data
        // then the service returns our project-specific envelope so that the data can be serialized by the framework

        //var aggregates = args.Request.Aggregates;

        //args.Request.Aggregates = new List<Telerik.DataSource.AggregateDescriptor>();

        //var groups = args.Request.Groups;

        //args.Request.Groups = new List<Telerik.DataSource.GroupDescriptor>();


        DataEnvelope<WeatherForecastModel> result = await ForecastService.GetForecastListAsync(args.Request);


        //args.Request.Aggregates = aggregates;
        //args.Request.Groups = groups;
        if (args.Request.Groups.Count > 0)
        {

            //var clientSideResult = result.CurrentPageData.ToDataSourceResult(args.Request);

            var data = GroupDataHelpers.DeserializeGroups<WeatherForecastModel>(result.GroupedData);
            args.Data = data.Cast<object>().ToList();
        }
        else
        {
            args.Data = result.CurrentPageData.Cast<object>().ToList();
        }

        args.Total = result.TotalItemCount;
    }

    // for brevity, CUD operations are not implemented, only Read
}
